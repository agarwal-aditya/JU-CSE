#include <iostream>
#include <cstdio>
#include <cstdlib>

#define N 11


class pascal{
	int *arr[N];
	
public:
	//constructor
	pascal(){
		int i;
		for(i= 0; i < N;i++){
			arr[i] = (int*)calloc(i+1, sizeof(int));
			
		}
	}
	
	//destructor
	~pascal(){
		int i;
		for(i= 0; i < N; i++){
			free(arr[i]);
		}
	}
	
	//generate numbers using property of pascal triangle
	void generate_numbers(void){
		int i, j;
		for(i = 0; i < N; i++){
			for( j = 0; j <= i; j++){		//changed N with i
				if(j == 0 || j == i)
					arr[i][j] = 1;
				else
					arr[i][j] = arr[i-1][j-1] + arr[i-1][j];  
			}
		}
	}
	
	//generate numbers using c(n,k) in an optimised manner.
	void generate_numbers(int a){
		int i, j;
		unsigned long long temp;
		for(i = 0; i < N; i++){
			temp = 1;
			for( j = 0; j <= i; j++){
				if( j == 0 || j == i)
					arr[i][j] = 1;
				else{
					temp = temp * (i+1-j) / (j); 
					arr[i][j] = temp;
				}
			}
		}
	}
	
	//returns the integer stored in the array at i th row and j th column
	int return_number(int i, int j){
		return arr[i][j];
	}
};

/*
function to check values generated using triangle property and c(n,k) 
arguments: reference to objects for triangle generated using property and triangle genereted using c(n,k)
*/
void check_value(pascal &a, pascal &b){
	int n, k;
	std::cout << "Enter n, k with a space in between to check the values generated by the two method.\n\n";
	std::cin >> n >> k;
	if( n < k){
		std::cout << "k cannot be greater than n!\n";
	}
	else{
		int a1 = a.return_number(n, k), b1 = b.return_number(n, k);
		
		std::cout << "Using Property:\t" << a1 << "\n";
		std::cout << "Using c(n,k):\t" << b1 << "\n";
		if(a1 == b1)
			std::cout << "Both Are Equal. Proved.\n\n";
	}
}


int main(void){
	int i, j;
	
	pascal triangle_property, nck;
	
	triangle_property.generate_numbers();
	
	std::cout<< "\nPascal Triangle using property."<<"\n";
	for(i = 0; i < N; i++){
		j = 4*N - 3*i;
		while(j--){
			printf(" ");
		}
		for(j = 0; j <= i; j++){
			printf("%3d   ", triangle_property.return_number(i, j) );
		}
		printf("\n\n");
	}
	
	nck.generate_numbers(1);
	check_value(nck, triangle_property);
	
	int choice;
	std::cout<<"If you want to generate pascal triangle using c(n,k) enter non negative integer, else press 0."<<"\n";
	std::cin>>choice;
	if(choice){
		std::cout << "\nPascal Triangle using c(n,k)."<<"\n";
		for(i = 0; i < N; i++){
			j = 4*N - 3*i;
			while(j--){
				printf(" ");
			}
			for(j = 0; j <= i; j++){
				printf("%3d   ", nck.return_number(i, j) );
			}
			printf("\n\n");
		}
	}
	
	
	return 0;
}
